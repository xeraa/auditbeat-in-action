auditbeat.modules:


- module: auditd
  resolve_ids: true
  failure_mode: log
  backlog_limit: 8196  # Should take 70MiB of RAM in worst case
  rate_limit: 0
  include_raw_message: false
  include_warnings: false
  backpressure_strategy: auto
  audit_rules: |
    ## Define audit rules here.
    ## Create file watches (-w) or syscall audits (-a action,filter).
    ## * action can be either always or never.
    ## * filter specifies which kernel rule-matching filter is applied to the event,
    ##   which can be one of the following: task, exit, user, and exclude.
    ## Several system calls can be grouped into one rule, each specified after the -S option.
    ## For a full list of system calls see /usr/include/x86_64-linux-gnu/asm/unistd_64.h.
    ## Add a keyword (-k) to the log event.

    # Log read access to passwd from selected users (1001=developers)
    -a always,exit -F path=/etc/passwd -F perm=r -F uid=1001 -k developers-passwd-read

    # An admin may be abusing power by looking in user's home dir
    -a always,exit -F dir=/home -F uid=0 -F auid>=1000 -F auid!=unset -C auid!=obj_uid -F key=power-abuse

    # Production rules for Auditd from here

    # If you are on a 64 bit platform, everything should be running
    # in 64 bit mode. This rule will detect any use of the 32 bit syscalls
    # because this might be a sign of someone exploiting a hole in the 32
    # bit API.
    -a always,exit -F arch=b32 -S all -F key=32bit-abi

    # Executions
    -a always,exit -F arch=b64 -S execve,execveat -k exec

    # External access (warning: these can be expensive to audit)
    -a always,exit -F arch=b64 -S accept,bind,connect,listen -F key=external-access

    # Identity changes
    -w /etc/group -p wa -k identity
    -w /etc/passwd -p wa -k identity
    -w /etc/gshadow -p wa -k identity

    # Unauthorized access attempts
    -a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -k access
    -a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -k access

    # Modify date and time
    -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
    -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
    -a always,exit -F arch=b64 -S clock_settime -k time-change
    -a always,exit -F arch=b32 -S clock_settime -k time-change
    -w /etc/localtime -p wa -k time-change

    # Modify user/group
    -w /etc/shadow -p wa -k identity
    -w /etc/security/opasswd -p wa -k identity

    # Modify the system's network environment
    -a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
    -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
    -w /etc/issue -p wa -k system-locale
    -w /etc/issue.net -p wa -k system-locale
    -w /etc/hosts -p wa -k system-locale

    # Login and logout events
    -w /var/log/faillog -p wa -k logins
    -w /var/log/lastlog -p wa -k logins
    -w /var/log/tallylog -p wa -k logins

    # Initiation information
    -w /var/run/utmp -p wa -k session
    -w /var/log/wtmp -p wa -k logins
    -w /var/log/btmp -p wa -k logins

    # Successful file system mounts
    -a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts
    -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts

    # Changes to system administration scope (sudoers)
    -w /etc/sudoers -p wa -k scope
    -w /etc/sudoers.d/ -p wa -k scope

    # System administrator actions (sudolog)
    -w /var/log/sudo.log -p wa -k actions

    # Kernel module loading and unloading
    -w /sbin/insmod -p x -k modules
    -w /sbin/rmmod -p x -k modules
    -w /sbin/modprobe -p x -k modules
    -a always,exit -F arch=b64 -S init_module -S delete_module -k modules

    # Docker events
    -w /usr/bin/docker -k docker
    -w /etc/docker -k docker
    -w /lib/systemd/system/docker.service -k docker
    -w /lib/systemd/system/docker.socket -k docker
    -w /etc/default/docker -k docker
    -w /etc/docker/key.json -k docker
    -w /usr/bin/docker-containerd -k docker
    -w /usr/bin/docker-runc -k docker
    -w /usr/sbin/runc -k docker
    -w /usr/bin/containerd -k docker


- module: system
  datasets:
    - host
    - user
    - package
    - login
  period: 1m
  user.detect_password_changes: true


- module: system
  datasets:
    - process
    - socket
  period: 2s


- module: file_integrity
  paths:
  - /var/www/html/
  exclude_files:
  - '(?i)\.sw[nopx]$'
  - '~$'
  - '/\.git($|/)'
  scan_at_start: true
  scan_rate_per_sec: 50 MiB
  file.max_file_size: 100 MiB
  file.hash_types: [sha1]
  recursive: true


name: "{{ inventory_hostname }}"
tags: ["{{ env }}"]


processors:
- add_cloud_metadata: ~
- add_host_metadata: ~


monitoring.enabled: true


output.elasticsearch:
  hosts: ["{{ elasticsearch_host }}"]
  username: "{{ elasticsearch_user }}"
  password: "${ES_PWD}"

setup.kibana:
  host: "{{ kibana_host }}"
  username: "{{ elasticsearch_user }}"
  password: "${ES_PWD}"

#cloud.id: ""
#cloud.auth: "{{ elasticsearch_user }}:${ES_PWD}"
